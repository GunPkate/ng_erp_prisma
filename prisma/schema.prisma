// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model userType{
  id String @id @default(uuid())
  userType String @map("user_type")
  user user[]
}

model user{
  userId String @id @default(uuid()) @map("user_id")
  userTypeId String @map("user_type_id")
  usertype userType@relation(fields: [userTypeId], references: [id])
  firstName String @map("first_name")
  lastName String @map("last_name")
  email String
  contactNo String @map("contact_no")
  username String
  password String

  stock stock[]
  supplierInvoice supplierInvoice[]
  customerInvoice customerInvoice[]
  supplierPayment supplierPayment[]
  customerPayment customerPayment[]
  transaction transaction[]
}

model accountHead{
  id String @id @default(uuid())
  accountHeadName String @map("account_head_name")
  code String @unique

  accountControl accountControl[]
  transaction transaction[]
}

model accountControl{
  id String @id @default(uuid())
  accountControlName String @map("account_control_name")
  code String @unique
  accountHeadCode String @map("account_head_code")

  accountHead accountHead@relation(fields: [accountHeadCode], references: [code])
  transaction transaction[]
}

model product{
  id String @id @default(uuid())
  productName String @map("product_name")
  stockThresholdQty Int @map("stock_threshold_qty")
  catagoryId String @unique @map("catagory_id")
  stock stock[]
  category category @relation(fields: [catagoryId], references: [id])
}

model stock{
  id String @id @default(uuid())
  productId String @map("product_id")
  status String @map("status")
  quantity Int
  price Float
  invoiceDetailId String @unique
  expiryDate DateTime @map("expiry_date")
  manuDate DateTime @map("manu_date")

  userId String @map("user_id")
  user user? @relation(fields: [userId],references: [userId])

  product product @relation(fields: [productId], references: [id])
}

model category{
  id String @id @default(uuid())
  categoryName String @map("category_name")
  product product[]
}

model supplier{
  supplierId String @id @default(uuid()) @map("supplier_id")
  supplierName String @map("supplier_name")
  address String
  email String
  contactNo String @map("contact_no")
  description String
  supplierInvoice supplierInvoice[]
}

model customer{
  customerId String @id @default(uuid()) @map("customer_id")
  customerName String @map("customer_name")
  address String
  email String
  contactNo String @map("contact_no")
  description String
  customerInvoice customerInvoice[]
}

model supplierInvoice{
  id String @id @default(uuid())
  supplierId String @map("supplier_id")
  userId String @map("user_id")
  invoiceNo String @unique @map("invoice_no")
  title String
  totalAmount Float @map("total_amount")
  date DateTime
  description String
  supplier supplier @relation(fields: [supplierId],references: [supplierId])
  supplierInvoiceDetail supplierInvoiceDetail[]
  supplierPayment supplierPayment[]
  user user? @relation(fields: [userId],references: [userId])
}

model supplierInvoiceDetail{
  id String @id @default(uuid())
  supplierInvoiceId String @map("supplier_invoice_id")
  productId String @map("product_id")
  purchaseQty Int @map("purchase_qty")
  purchaseUnitPrice Float @map("purchase_unit_price")
  supplierInvoice supplierInvoice @relation(fields: [supplierInvoiceId],references: [id],  onDelete: Cascade)
}

model customerInvoice{
  id String @id @default(uuid())
  customerId String @map("customer_id")
  userId String @map("user_id")
  invoiceNo String @unique @map("invoice_no")
  title String
  totalAmount Float @map("total_amount")
  date DateTime
  description String
  customer customer @relation(fields: [customerId],references: [customerId])
  customerInvoiceDetail customerInvoiceDetail[]
  customerPayment customerPayment[]
  user user? @relation(fields: [userId],references: [userId])
}

model customerInvoiceDetail{
  id String @id @default(uuid())
  customerInvoiceId String @map("customer_invoice_id")
  productId String @map("product_id")
  saleQty Int @map("sale_qty")
  saleUnitPrice Float @map("sale_unit_price")
  customerInvoice customerInvoice @relation(fields: [customerInvoiceId],references: [id], onDelete: Cascade)
}

model supplierPayment{
  paymentId String @id @default(uuid()) @map("payment_id")
  supplierId String @map("supplier_id")
  supplierInvoiceNo String @map("supplier_invoice")
  userId String @map("user_id")
  invoiceNo String @map("invoice_no")
  totalAmount Float @map("total_amount")
  paymentAmount Float @map("payment_amount")
  remainBalance Float @map("remain_balance")
  date DateTime
  supplierInvoice supplierInvoice @relation(fields: [supplierInvoiceNo], references: [invoiceNo], onDelete: Cascade)
  user user? @relation(fields: [userId],references: [userId])
}

model customerPayment{
  paymentId String @id @default(uuid()) @map("payment_id")
  customerId String @map("customer_id")
  customerInvoiceNo String @map("customer_invoice")
  userId String @map("user_id")
  invoiceNo String @map("invoice_no")
  totalAmount Float @map("total_amount")
  paymentAmount Float @map("payment_amount")
  remainBalance Float @map("remain_balance")
  date DateTime
  customerInvoice customerInvoice@relation(fields: [customerInvoiceNo], references: [invoiceNo], onDelete: Cascade)
  user user? @relation(fields: [userId],references: [userId])
}

model financialYear{
  financialYearId String @id @map("financial_year_id")
  financialYear DateTime @map("financial_year")
  isActive Boolean
  transaction transaction[]
}

model transaction{
  id String @id
  financialYearId String @map("financial_year_id")
  accountHeadCode String @map("account_head_code")
  accountControlCode String @map("account_control_code")
  invoiceNo String  @map("invoice_no")
  invoiceDetailsId String @map("invoice_detail_no")
  userId String @map("user_id")
  debit Float
  credit Float
  transactionDate DateTime @map("transaction_date")
  transactionTitle String @map("transaction_title")
  description String

  financialYear financialYear? @relation(fields: [financialYearId], references: [financialYearId])
  accountHead accountHead@relation(fields: [accountHeadCode], references: [code])
  accountControl accountControl@relation(fields: [accountControlCode], references: [code])
  user user? @relation(fields: [userId],references: [userId])
}