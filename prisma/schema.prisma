// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model userType{
  id String @id @default(uuid())
  user_type String
  user user?
}

model user{
  user_id String @id @default(uuid())
  user_type_id String  @unique
  usertype userType@relation(fields: [user_type_id], references: [id])
  first_name String
  last_name String
  email String
  contact_no String
  username String
  password String

  stock stock[]
  supplierInvoice supplierInvoice[]
  customerInvoice customerInvoice[]
  supplierPayment supplierPayment[]
  customerPayment customerPayment[]
  transaction transaction[]
}

model accountHead{
  id Int @id
  accounthead_name String
  code String @unique
  accountControl accountControl[]
}

model accountControl{
  id Int @id
  accountcontrol_name String
  code String @unique
  accountcontrol_code String
  accountHead accountHead@relation(fields: [accountcontrol_code], references: [code])
  accountSubControl accountSubControl[]
}

model accountSubControl{
  id Int @id
  accountsubcontrol_name String
  code String
  accountsubcontrol_code String
  accountControl accountControl@relation(fields: [accountsubcontrol_code], references: [code])
}

model stock{
  id String @id
  product_id String @unique
  catagory_id String @unique
  product_name String
  quantity Int
  sale_price Float
  current_purchase_price Float
  description String
  category category @relation(fields: [catagory_id], references: [id])
  expiry_date DateTime
  manu_date DateTime
  stock_threshold_qty Int
  user_id String
  user user? @relation(fields: [user_id],references: [user_id])

  supplierInvoiceDetail supplierInvoiceDetail[]
}

model category{
  id String @id
  category_name String
  stock stock[]
}

model supplier{
  supplier_id String @id @default(uuid())
  supplier_name String
  address String
  email String
  contact_no String
  description String
  supplierInvoice supplierInvoice[]
}

model customer{
  customer_id String @id @default(uuid())
  customer_name String
  address String
  email String
  contact_no String
  description String
  customerInvoice customerInvoice[]
}

model supplierInvoice{
  id String @id @default(uuid())
  supplier_id String @unique
  user_id String
  invoice_no String @unique
  title String
  total_amount Float
  date DateTime
  description String
  supplier supplier @relation(fields: [supplier_id],references: [supplier_id])
  supplierInvoiceDetail supplierInvoiceDetail[]
  supplierPayment supplierPayment[]
  user user? @relation(fields: [user_id],references: [user_id])
}

model supplierInvoiceDetail{
  id String @id @default(uuid())
  supplier_invoice_id String @unique
  product_id String
  purchase_qty Int
  purchase_unit_price Float
  supplierInvoice supplierInvoice @relation(fields: [supplier_invoice_id],references: [id])
  stock stock? @relation(fields: [product_id], references: [product_id])
}

model customerInvoice{
  id String @id @default(uuid())
  customer_id String @unique
  user_id String
  invoice_no String @unique
  title String
  total_amount Float
  date DateTime
  description String
  customer customer @relation(fields: [customer_id],references: [customer_id])
  customerInvoiceDetail customerInvoiceDetail?
  customerPayment customerPayment[]
  user user? @relation(fields: [user_id],references: [user_id])
}

model customerInvoiceDetail{
  id String @id @default(uuid())
  customer_invoice_id String @unique
  product_id String
  sale_qty Int
  sale_unit_price Float
  customerInvoice customerInvoice @relation(fields: [customer_invoice_id],references: [id])
}

model supplierPayment{
  payment_id String @id @default(uuid())
  supplier_id String
  supplier_invoice String
  user_id String
  invoice_no String
  total_amount Float
  payment_amount Float
  remain_balance Float
  date DateTime
  supplierInvoice supplierInvoice @relation(fields: [supplier_invoice], references: [invoice_no])
  user user? @relation(fields: [user_id],references: [user_id])
}

model customerPayment{
  payment_id String @id @default(uuid())
  customer_id String
  customer_invoice String
  user_id String
  invoice_no String
  total_amount Float
  payment_amount Float
  remain_balance Float
  date DateTime
  customerInvoice customerInvoice@relation(fields: [customer_invoice], references: [invoice_no])
  user user? @relation(fields: [user_id],references: [user_id])
}

model financialYear{
  financial_year_id Int @id
  financial_year DateTime
  isActive Boolean
  transaction transaction[]
}

model transaction{
  id String@id
  fiscal_year_id Int
  accounthead_id String
  accountcontrol_id String
  accountsubcontrol_id String
  invoice_no String
  user_id String
  credit Float
  debit Float
  transaction_date DateTime
  transaction_title String
  description String
  financialYear financialYear? @relation(fields: [fiscal_year_id], references: [financial_year_id])
  user user? @relation(fields: [user_id],references: [user_id])
}